openapi: '3.0.2'
info:
  title: SI-EMOO
  description: This is a sample SI-EMOO server.
  version: '1.0.0'
servers:
  - url: https://siemoo.vercel.app/api/v1
    description: Development server
  - url: http://localhost:3000/api/v1
    description: local server
paths:
  /all:
    get:
      tags:
        - all
      summary: Mendapatkan total data 
      description: Mendapatkan total data wisata, hotel, ulasan, kecamatan
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/BasicResponse"
                  - type: object
                    properties:
                      data:
                        type: object 
                        properties: 
                          hotel: 
                            type: number
                            example: 1
                          wisata: 
                            type: number
                            example: 1
                          kecamatan: 
                            type: number
                            example: 1
                          ulasan: 
                            type: number
                            example: 1
        
        '201':
          description: OK!
        '400':
          description: Invalid status value

  

  # ulasan
  /ulasan:
    get:
      tags:
        - Ulasan
      summary: Mendapatkan ulasan
      description: Mendapatkan semua ulasan
      operationId: getUlasan
      parameters:
        - name: page
          in: query
          description: Get users by page
          schema:
            type : integer
            format: int64
            minimum: 1
        - name: limit
          in: query
          description: Get users by limit
          schema:
            type : integer
            format: int64
            minimum: 1
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/BasicResponse"
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          type: object
                          properties:
                            id:
                              type: integer
                              example: 2
                            nama:
                              type: string
                              example: "ads"
                            ulasan:
                              type: string
                              example: "apa adanya"
                            wisataId:
                              type: integer
                              example: 20
                            hotelId:
                              type: string
                              example: null
                            createdAt:
                              type: string
                              format: date-time
                              example: "2023-11-26T07:42:08.186Z"
                            updatedAt:
                              type: string
                              format: date-time
                              example: "2023-11-26T07:42:08.186Z"
                            wisata:
                              type: string
                              example: "The Westin Singapore"
  
  /ulasan/{id}:
    get:
      tags:
        - Ulasan
      summary: Mendapatkan ulasan
      description: Mendapatkan ulasan sesuai id
      operationId: getUlasanById
      parameters:
        - name: id
          in: path
          required: true
          description: Get Ulasan By Id
          schema:
            type : integer
            format: int64
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "OK"
                  err:
                    type: object
                    example: null
                  data:
                    type: object
                    properties:
                      id:
                        type: integer
                        example: 2
                      nama:
                        type: string
                        example: "ads"
                      ulasan:
                        type: string
                        example: "apa adanya"
                      wisataId:
                        type: integer
                        example: 20
                      hotelId:
                        type: string
                        example: null
                      createdAt:
                        type: string
                        format: date-time
                        example: "2023-11-26T07:42:08.186Z"
                      updatedAt:
                        type: string
                        format: date-time
                        example: "2023-11-26T07:42:08.186Z"
                      wisata:
                        type: string
                        example: "The Westin Singapore"
        '400':
          description: Invalid status value
    
    post:
      tags:
        - Ulasan
      summary: Menambahkan ulasan 
      description: Menambahkan ulasan di wisata atau di hotel sesuai id
      operationId: create-ulasan
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                nama:
                  type: string
                  default: "ads"
                ulasan:
                  type: string
                  default: "apa adanya"
                wisataId:
                  type: integer
                  default: 20
                hotelId:
                  type: string
                  default: null
      responses:
        '201':
          description: OK!
        '400':
          description: Invalid status value
    
    put:
      tags:
        - Ulasan
      summary: Mengedit ulasan 
      description: Mengedit ulasan sesuai id
      operationId: update-ulasan
      parameters:
        - name: id
          in: path
          required: true
          description: Get Ulasan By Id
          schema:
            type : integer
            format: int64
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                nama:
                  type: string
                  default: "ads"
                ulasan:
                  type: string
                  default: "apa adanya"
                wisataId:
                  type: integer
                  default: 20
                hotelId:
                  type: string
                  default: null
      responses:
        '201':
          description: OK!
        '400':
          description: Invalid status value
    
    delete:
      tags:
        - Ulasan
      summary: Menghapus ulasan
      description: Menghapus ulasan sesuai id
      operationId: deleteUlasanById
      parameters:
        - name: id
          in: path
          required: true
          description: Get Ulasan By Id
          schema:
            type : integer
            format: int64
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Data ulasan berhasil dihapus"
                  err:
                    type: string
                    example: null
                  data:
                    type: object
                    example: null
        '400':
          description: Invalid status value
      security:
        - bearerAuth: []
        
  /admin/login:
    post:
      tags:
        - Admin
      summary: Login admin
      description: Login admin
      operationId: login-admin
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  default: "yowwww"
                password:
                  type: string
                  default: "adanya"
      responses:
        '201':
          description: OK!
        '400':
          description: Invalid status value
  /admin/whoami:
    get:
      tags:
        - Admin
      summary: Mendapatkan ulasan
      description: Mendapatkan semua ulasan
      operationId: getUlasan
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Successful operation
        '400':
          description: Invalid status value

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    BasicResponse:
        title: BasicResponse
        type: object
        properties:
          status:
            type: boolean
            example: true
          message:
            type: string
            example: "OK"
          err:
            type: object
            example: null
    Pagination:
      title: Pagination
      type: object
      properties:
        links:
          type: object
          properties:
            next:
              type: string
              example: "https://domain.com/users?page=3&limit=10"
            prev:
              type: string
              example: "https://domain.com/users?page=1&limit=10"
        total_items:
          type: integer
          example: 100
    Data:
      title: Data
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: "John Doe"
        email:
          type: string
          example: "mail@mail.com"